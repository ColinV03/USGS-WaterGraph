{"version":3,"sources":["components/FetchData.js","components/Chart.js","App.js","reportWebVitals.js","index.js"],"names":["FetchData","jsonFormatting","siteLocationCode","usgsParameterCode","useState","outflowData","setOutflowData","targetPoint","setTargetPoint","graphData","setGraphData","dataCollected","setDataCollected","dataPayload","setdataPayload","graphBoolean","setgraphBoolean","maxGraphHeight","setMaxGraphHeight","measurement","a","console","log","alert","axios","get","then","response","data","displayOutflowData","undefined","value","timeSeries","values","sourceInfo","siteName","variable","unit","unitCode","convertToReactVisData","newArray","map","record","push","x","indexOf","y","onSubmit","e","preventDefault","getOutflowData","type","placeholder","onChange","target","onClick","maxValue","Math","max","apply","item","setmaxValueGraphHeight","className","style","fill","opacity","dontCheckIfEmpty","yDomain","size","title","tickTotal","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAkBe,SAASA,IAEpB,IAAMC,EAAiB,WAGjBC,EAAmB,WACnBC,EAAoB,QAM5B,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAsCF,qBAAtC,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAkCJ,mBAAS,IAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA0CN,oBAAS,GAAnD,mBAAOO,EAAP,KAAsBC,EAAtB,KACA,EAAsCR,mBAAS,IAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KACA,EAAwCV,oBAAS,GAAjD,mBAAOW,EAAP,KAAqBC,EAArB,KAEA,EAA4CZ,mBAAS,KAArD,mBAAOa,EAAP,KAAuBC,EAAvB,KAGIC,EAAc,GAtBgB,4CAgDlC,sBAAAC,EAAA,yDACEC,QAAQC,IAAI,oBACZd,EAAeN,GACfmB,QAAQC,IAAR,wBAA6Bf,EAA7B,UAGoB,aAAhBA,GAA8C,aAAhBA,EANpC,gBAOIgB,MACE,2FARN,sCAWWC,IACJC,IADI,uDAE6ClB,EAF7C,mBAEmEN,EAFnE,mBAlDc,MAkDd,wBAE0HE,IAE9HuB,MAAK,SAACC,GAAD,OAAcrB,EAAeqB,EAASC,SAC3CF,KAAKL,QAAQC,IAAI,kBAhBxB,4CAhDkC,sBAuFlC,SAASO,IACPR,QAAQC,IAAIjB,QACQyB,IAAhBzB,GAA6C,OAAhBA,GAC9BK,EAAaL,EAAY0B,MAAMC,WAAW,GAAGC,OAAO,GAAGF,YAoBhCD,IAAtBzB,EAAY0B,MACdR,MAAM,6BAENF,QAAQC,IAAR,6BAAkCjB,EAAY0B,MAAMC,WAAW,GAAGE,WAAWC,gBAOrDL,IAAtBzB,EAAY0B,MACdR,MAAM,8BAENJ,EAAcd,EAAY0B,MAAMC,WAAW,GAAGI,SAASC,KAAKC,SAC5DjB,QAAQC,IAAR,yBAA8BH,KA7B5BoB,KAMFhB,MAAM,0BAgDV,SAASgB,IACN,IAAIC,EAAW,GACd/B,EAAUgC,KAAI,SAAAC,GACdF,EAASG,KAAK,CAACC,EAAGnC,EAAUoC,QAAQH,GAASI,EAAEJ,EAAOX,WAExDjB,EAAe0B,GACf5B,GAAiB,GA8BjB,OACE,gCACE,uBAAMmC,SA/JU,SAACC,GAEpBA,EAAEC,iBAGkB,OAAhB1C,QAAwCuB,IAAhBvB,EAC1BgB,MAAM,yBAENF,QAAQC,IAAR,2BAAgCf,IApCH,mCAqC7B2C,KAsJC,UACE,qEACA,uBACA,uBACEC,KAAK,OACLC,YAAY,oBACZC,SAAU,SAACL,GAAD,OAAOxC,EAAewC,EAAEM,OAAOvB,UAE3C,uBACA,wBACEoB,KAAK,SADP,iCAcF,wBAAQI,QAAS,kBAAM1B,KAAvB,2BACA,uBAGA,wBAAQ0B,QAAS,kBAAMhB,KAAvB,6BAGA,uBACA,wBAAQgB,QAAS,kBArDvB,WACE,IAAIC,EAAYC,KAAKC,IAAIC,MAAMF,KAAM5C,EAAY4B,KAAI,SAAAmB,GAAI,OAAIA,EAAKd,MAAK,IACvEzB,QAAQC,IAAIkC,GACZtC,EAAkBsC,GAkDSK,IAAvB,+BAGA,uBACA,wBAAQN,QAAS,WAhDjB5C,EACFK,GAAgB,GAEhBO,MAAM,2BA6CJ,sBACA,uBACA,qBAAKuC,UAAU,eAAf,SACG/C,EACC,sBAAK+C,UAAU,QAAQC,MAAO,GAA9B,UACE,oBAAID,UAAU,aAAd,SACGzD,EAAY0B,MAAMC,WAAW,GAAGE,WAAWC,WAE9C,eAAC,IAAD,CACE6B,KAAK,MACLC,QAAQ,IACRC,kBAAkB,EAClBC,QAAS,CAAC,GAAIlD,GAJhB,UAME,cAAC,IAAD,IACA,cAAC,IAAD,IACA,cAAC,IAAD,CAAgBW,KAAMf,EAAauD,KAAK,MACxC,cAAC,IAAD,CAAOC,MAAM,SAASC,UAAW,IACjC,cAAC,IAAD,CAAOD,MAAM,iBAAiBC,UAAW,WAI7C,uD,oCChQuBC,YCapBC,MAbf,WACE,OACE,qBAAKV,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,8BACE,cAAC9D,EAAD,CAAWO,YAAa,oBCCnBkE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBjD,MAAK,YAAkD,IAA/CkD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.7cff470c.chunk.js","sourcesContent":["import axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport \"../../node_modules/react-vis/dist/style.css\";\nimport {\n  XYPlot,\n  LineMarkSeries,\n  HorizontalGridLines,\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  ChartLabel,\n    FlexibleXYPlot,\n  FlexibleWidthXYPlot,\n  FlexibleHeightXYPlot\n} from \"react-vis\";\n// import Input from './Input';\n\n\nexport default function FetchData() {\n    //  API Interface variables: \n    const jsonFormatting = \"json,1.1\"\n\n    //location Specific details:\n    const siteLocationCode = \"03179000\"\n    const usgsParameterCode = \"00060\"\n  \n    // period for data aggregation: \n    const sevenDayPeriod = \"P7D\"\n\n    // React Hooks for data containment: \n  const [outflowData, setOutflowData] = useState({})\n  const [targetPoint, setTargetPoint] = useState();\n  const [graphData, setGraphData] = useState([])\n  const [dataCollected, setDataCollected] = useState(false);\n  const [dataPayload, setdataPayload] = useState([]);\n  const [graphBoolean, setgraphBoolean] = useState(false);\n\n  const [maxGraphHeight, setMaxGraphHeight] = useState(600)\n\n\n  let measurement = '';\n  \n \n\n\n  // handling input for specific site code: \n   const handleSubmit = (e) => {\n     //prevent reloading of the page\n     e.preventDefault();\n\n     //data validation: must be filled.\n     if (targetPoint === null || targetPoint === undefined) {\n       alert(\"Please Enter a value\");\n     } else {\n       console.log(`Submitting value ${targetPoint}`);\n       getOutflowData();\n     }\n     // reset();\n   };\n\n  // const [unitMeasurement, setUnitMeasurement] = useState({});\n\n    // response.data.value.timeSeries[0].values[0].value for the value of Outflow in ft^3/s\n    // value[0] is 7 days previous\n\n    // API Call: returns data, using setState to store JSON data. \n  async function getOutflowData() {\n    console.log(\"Sequence Started\")\n    setTargetPoint(siteLocationCode)\n    console.log(`Target point: ${targetPoint} SET!`)\n  \n    // //ERROR Catching: The system is currently supported by two endpoints:  03179000 and 01646500.\n    if (targetPoint !== \"03179000\" && targetPoint !== \"01646500\") {\n      alert(\n        \"Please use one of the two supported use cases available: \\n 03179000 \\n or \\n 01646500.\"\n      );\n    } else {\n       await axios\n        .get(\n          `https://waterservices.usgs.gov/nwis/iv/?site=${targetPoint}&format=${jsonFormatting}&period=${sevenDayPeriod}&parameterCd=${usgsParameterCode}`\n        )\n        .then((response) => setOutflowData(response.data))\n        .then(console.log(\"Data Received\"));\n      \n    }\n\n\n  }\n\n\n// // FOR TESTING: \n  // useEffect(() => {\n  //   getOutflowData();\n    \n  // }, [])\n\n    // Listening to the React Hook above for changes\n    // useEffect(() => {\n    //  setGraphData(outflowData.value.timeSeries[0].values[0].value)\n      \n    // }, [outflowData])\n\n\n\n    // Test case for logging to the DOM. \n  function displayOutflowData() {\n    console.log(outflowData);\n    if (outflowData !== undefined && outflowData !== null) {\n       setGraphData(outflowData.value.timeSeries[0].values[0].value);\n        displayOutflowName();\n         getMeasurementValues();\n        // consoleData();\n        // setmaxValueGraphHeight();\n        convertToReactVisData();\n      \n        // console.log(graphData);\n        \n    }\n    else {\n      alert(\"Cant do that just yet!\")\n    }\n  }\n    // displayOutflowName();\n   \n\n  \n  \n  function displayOutflowName() {\n    if (outflowData.value === undefined) {\n      alert(\"Please Gather Data first!\")\n    } else {\n      console.log(`Sample Point Name: ${outflowData.value.timeSeries[0].sourceInfo.siteName}`)\n      \n    }\n  }\n\n  function getMeasurementValues() {\n    \n    if (outflowData.value === undefined) {\n      alert(\"Please Gather Data first!\")\n    } else {\n      measurement = outflowData.value.timeSeries[0].variable.unit.unitCode\n      console.log(`Measurment in: ${measurement}`)\n    }\n  }\n\n  // integrate here the data to be passed into Chart.js\n  // pseudocode\n  // const data = {\n  //   {x: outflowData.date0.instantaneousValue, y: outflowData.date0},\n  //   {x: outflowData.date1.instantaneousValue, y: outflowData.date1},\n  //   {x: outflowData.date2.instantaneousValue, y: outflowData.date2},\n    \n  //  }\n\n  function consoleData() {\n    if (outflowData !== undefined) {\n      let data = outflowData.value\n      console.log(data.timeSeries[0].values[0].value)\n    }\n    else {\n      alert(\"Cant do that just yet!\")\n    }\n  }\n\n\n// DATA Conversion steps: \n  function convertToReactVisData() {\n     let newArray = [];\n      graphData.map(record => {\n      newArray.push({x: graphData.indexOf(record), y:record.value})\n    })\n    setdataPayload(newArray);\n    setDataCollected(true);\n   \n    \n  }\n\n\n\n  // for scaling graph: Thought for dynamically scaling the domain in the XYPlot \n\n  \n  function setmaxValueGraphHeight() {\n    let maxValue = (Math.max.apply(Math, dataPayload.map(item => item.y)) +100);\n    console.log(maxValue);\n    setMaxGraphHeight(maxValue);\n  }\n\n\n\n  function graphIt() {\n    if (dataCollected) {\n      setgraphBoolean(true);\n    } else {\n      alert(\"Cant do that just yet!\");\n    }\n    \n  }\n\n\n\n\n    return (\n      <div>\n        <form onSubmit={handleSubmit}>\n          <label>Please provide the sample point:</label>\n          <br></br>\n          <input\n            type=\"text\"\n            placeholder=\"Please Enter Code\"\n            onChange={(e) => setTargetPoint(e.target.value)}\n          />\n          <br></br>\n          <button\n            type=\"submit\"\n            // onClick={() => getOutflowData()}\n          >\n            Get Outflow Data\n          </button>\n        </form>\n\n        {/* <button onClick={() => displayOutflowName()}>\n          Get outflow siteName\n        </button>\n        <button onClick={() => getMeasurementValues()}>\n          Get Temperature Data\n        </button> */}\n        <button onClick={() => displayOutflowData()}>Grab all Data</button>\n        <br></br>\n        {/* <button onClick={() => consoleData()}>Console Graph Data</button> */}\n        {/* <br></br> */}\n        <button onClick={() => convertToReactVisData()}>\n          Conversion Data\n        </button>\n        <br></br>\n        <button onClick={() => setmaxValueGraphHeight()}>\n          Max graph height:\n        </button>\n        <br></br>\n        <button onClick={() => graphIt()}>GraphIT!</button>\n        <br></br>\n        <div className=\"chartWrapper\">\n          {graphBoolean ? (\n            <div className=\"chart\" style={{}}>\n              <h5 className=\"chartTitle\">\n                {outflowData.value.timeSeries[0].sourceInfo.siteName}\n              </h5>\n              <FlexibleXYPlot\n                fill=\"red\"\n                opacity=\"1\"\n                dontCheckIfEmpty={true}\n                yDomain={[20, maxGraphHeight]}\n              >\n                <VerticalGridLines />\n                <HorizontalGridLines />\n                <LineMarkSeries data={dataPayload} size=\"1\" />\n                <XAxis title=\"X Axis\" tickTotal={8} />\n                <YAxis title=\"Outflow ft^3/s\" tickTotal={10} />\n              </FlexibleXYPlot>\n            </div>\n          ) : (\n            <h3>No data selected</h3>\n          )}\n        </div>\n      </div>\n    );\n}\n","import React, {Component} from \"react\"\nimport \"../../node_modules/react-vis/dist/style.css\"\nimport { XYPlot, LineSeries, HorizontalGridLines, XAxis, YAxis, VerticalGridLines } from \"react-vis\";\n// import verticalGridLines from \"react-vis/dist/plot/vertical-grid-lines\";\n// import yAxis from \"react-vis/dist/plot/axis/y-axis\";\n\nexport default class Chart extends Component {\n  render() {\n    const data = [\n      { x: 0, y: 8 },\n      { x: 1, y: 5 },\n      { x: 2, y: 4 },\n      { x: 3, y: 9 },\n      { x: 4, y: 1 },\n      { x: 5, y: 7 },\n      { x: 6, y: 6 },\n      { x: 7, y: 3 },\n      { x: 8, y: 2 },\n      { x: 9, y: 0 },\n    ];\n    return (\n      <div className=\"Chart\">\n        <XYPlot height={300} width={300}>\n                <VerticalGridLines/>\n                <HorizontalGridLines />\n                <XAxis />\n                <YAxis/>\n                <LineSeries data={data} />\n          \n        </XYPlot>\n      </div>\n    );\n  }\n}\n","// import logo from './logo.svg';\nimport './App.css';\n// import Input from \"./components/Input\"\nimport FetchData from './components/FetchData';\nimport Chart from \"./components/Chart\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <FetchData targetPoint={\"03179000\"} />\n          {/* <Chart></Chart> */}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}