{"version":3,"sources":["components/FetchData.js","components/Chart.js","App.js","reportWebVitals.js","index.js"],"names":["FetchData","jsonFormatting","siteLocationCode","usgsParameterCode","useState","outflowData","setOutflowData","targetPoint","setTargetPoint","graphData","setGraphData","dataCollected","setDataCollected","dataPayload","setdataPayload","graphBoolean","setgraphBoolean","maxGraphHeight","setMaxGraphHeight","measurement","a","console","log","alert","axios","get","then","response","data","setTimeout","useEffect","undefined","value","timeSeries","values","length","sourceInfo","siteName","variable","unit","unitCode","newArray","map","record","push","x","indexOf","y","id","dateTime","convertToReactVisData","maxValue","Math","max","apply","item","setmaxValueGraphHeight","className","onSubmit","e","preventDefault","getOutflowData","type","placeholder","onChange","target","style","fill","opacity","dontCheckIfEmpty","yDomain","size","title","tickTotal","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0136183.chunk.js","sourcesContent":["import axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nimport \"../../node_modules/react-vis/dist/style.css\";\nimport {\n  XYPlot,\n  LineMarkSeries,\n  HorizontalGridLines,\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  ChartLabel,\n  FlexibleXYPlot,\n  FlexibleWidthXYPlot,\n  FlexibleHeightXYPlot,\n} from \"react-vis\";\n// import Input from './Input';\n\nexport default function FetchData() {\n  //  API Interface variables:\n  const jsonFormatting = \"json,1.1\";\n\n  //location Specific details:\n  const siteLocationCode = \"03179000\";\n  const usgsParameterCode = \"00060\";\n\n  // period for data aggregation:\n  const sevenDayPeriod = \"P7D\";\n\n  // React Hooks for data containment:\n  const [outflowData, setOutflowData] = useState({});\n  const [targetPoint, setTargetPoint] = useState();\n  const [graphData, setGraphData] = useState([]);\n  const [dataCollected, setDataCollected] = useState(false);\n  const [dataPayload, setdataPayload] = useState([]);\n  const [graphBoolean, setgraphBoolean] = useState(false);\n\n  const [maxGraphHeight, setMaxGraphHeight] = useState(100);\n\n  let measurement = \"\";\n\n  // handling input for specific site code:\n  const handleSubmit = (e) => {\n    //prevent reloading of the page\n    e.preventDefault();\n\n    //data validation: must be filled.\n    if (targetPoint === null || targetPoint === undefined) {\n      alert(\"Please Enter a value\");\n    } else {\n      console.log(`Submitting value ${targetPoint}`);\n      getOutflowData();\n    }\n    // reset();\n  };\n\n  // const [unitMeasurement, setUnitMeasurement] = useState({});\n\n  // response.data.value.timeSeries[0].values[0].value for the value of Outflow in ft^3/s\n  // value[0] is 7 days previous\n\n  // API Call: returns data, using setState to store JSON data.\n  async function getOutflowData() {\n    console.log(\"Sequence Started\");\n    setTargetPoint(siteLocationCode);\n    console.log(`Target point: ${targetPoint} SET!`);\n\n    // USE SET TIMEOUT TO ALLOW DATA TO BE WRITTEN TO OUTFLOW DATA BEFORE GRAPHING.\n\n    // //ERROR Catching: The system is currently supported by two endpoints:  03179000 and 01646500.\n    if (targetPoint !== \"03179000\" && targetPoint !== \"01646500\") {\n      alert(\n        \"Please use one of the two supported use cases available: \\n 03179000 \\n or \\n 01646500.\"\n      );\n    } else {\n      await axios\n        .get(\n          `https://waterservices.usgs.gov/nwis/iv/?site=${targetPoint}&format=${jsonFormatting}&period=${sevenDayPeriod}&parameterCd=${usgsParameterCode}`\n        )\n        .then((response) => setOutflowData(response.data))\n        .then(setTimeout(() => {\n          setDataCollected(true)\n        }, 200));\n        \n    }\n  }\n\n  // // FOR TESTING:\n  // useEffect(() => {\n  //   getOutflowData();\n\n  // }, [])\n\n  // Listening to the React Hook above for changes\n  useEffect(() => {\n    if (\n      outflowData !== undefined &&\n      outflowData !== null &&\n      dataCollected\n    ) {\n      displayOutflowData();\n      console.log(`\"Outflow Got called! Graph State ${dataCollected}\"`);\n    }\n    // displayOutflowData();\n  }, [dataCollected]);\n\n  // useHook for converting and displaying data:\n  useEffect(() => {\n    if (graphData.length > 0) {\n      console.log(\"Graph data needs data first!\");\n      displayOutflowName();\n      getMeasurementValues();\n      convertToReactVisData();\n    }\n  }, [graphData]);\n\n  // UseEffect with atimeout to set the max value of the graphing height\n  useEffect(() => {\n    if (dataPayload.length > 0) {\n      setTimeout(() => {\n        setmaxValueGraphHeight();\n      }, 100);\n      \n    }\n  }, [dataPayload]);\n\n  useEffect(() => {\n    if (maxGraphHeight > 101 && dataPayload.length > 0) {\n      setTimeout(() => {\n        graphIt();\n      }, 500);\n   }\n }, [maxGraphHeight])\n\n  // Test case for logging to the DOM.\n  function displayOutflowData() {\n    console.log(outflowData);\n    if (outflowData !== undefined && outflowData !== null && dataCollected) {\n      setGraphData(outflowData.value.timeSeries[0].values[0].value);\n      // displayOutflowName();\n      //  getMeasurementValues();\n      //  convertToReactVisData();\n      // consoleData();\n      // setmaxValueGraphHeight();\n\n      // console.log(graphData);\n    } else {\n      alert(\"Display: Cant do that just yet!\");\n    }\n  }\n  // displayOutflowName();\n\n  function displayOutflowName() {\n    if (outflowData.value === undefined) {\n      alert(\"Please Gather Data first!\");\n    } else {\n      console.log(\n        `Sample Point Name: ${outflowData.value.timeSeries[0].sourceInfo.siteName}`\n      );\n    }\n  }\n\n  function getMeasurementValues() {\n    if (outflowData.value === undefined) {\n      alert(\"Please Gather Data first!\");\n    } else {\n      measurement = outflowData.value.timeSeries[0].variable.unit.unitCode;\n      console.log(`Measurment in: ${measurement}`);\n    }\n  }\n\n  // integrate here the data to be passed into Chart\n  // pseudocode\n  // const data = {\n  //   {x: outflowData.date0.instantaneousValue, y: outflowData.date0},\n  //   {x: outflowData.date1.instantaneousValue, y: outflowData.date1},\n  //   {x: outflowData.date2.instantaneousValue, y: outflowData.date2},\n\n  //  }\n\n  function consoleData() {\n    if (outflowData !== undefined) {\n      let data = outflowData.value;\n      console.log(data.timeSeries[0].values[0].value);\n    } else {\n      alert(\"Cant do that just yet!\");\n    }\n  }\n\n  // DATA Conversion steps:\n  function convertToReactVisData() {\n    let newArray = [];\n    graphData.map((record) => {\n      newArray.push({\n        x: graphData.indexOf(record),\n        y: record.value,\n        id: record.dateTime,\n      });\n    });\n    setdataPayload(newArray);\n\n    console.log(newArray);\n  }\n\n  // for scaling graph: Thought for dynamically scaling the domain in the XYPlot\n\n  function setmaxValueGraphHeight() {\n    let maxValue =\n      Math.max.apply(\n        Math,\n        dataPayload.map((item) => item.y)\n      ) + 100;\n    console.log(maxValue);\n    setMaxGraphHeight(maxValue);\n  }\n\n  function graphIt() {\n    if (dataCollected) {\n      setgraphBoolean(true);\n    } else {\n      alert(\"Graphing: Cant do that just yet!\");\n    }\n  }\n\n  // Date Time formatting for X axis labeling:\n  function formatDate(date) {\n    var dd = date.getDate();\n    var mm = date.getMonth() + 1;\n    var yyyy = date.getFullYear();\n    if (dd < 10) {\n      dd = \"0\" + dd;\n    }\n    if (mm < 10) {\n      mm = \"0\" + mm;\n    }\n    date = mm + \"/\" + dd + \"/\" + yyyy;\n    return date;\n  }\n\n  // X axis labeling on a recurring reverse looking 7 day span. Current day is always today.\n  let xAxisArray = [];\n  function xAxisLabels() {\n    xAxisArray = [];\n    for (var i = 0; i < 7; i++) {\n      var d = new Date();\n      d.setDate(d.getDate() - i);\n      xAxisArray.push(formatDate(d));\n    }\n    console.log(xAxisArray);\n  }\n\n  return (\n    <div className=\"fetchData\">\n      <div className=\"instructions\">\n        <p className=\"instructionsText\">\n          Instructions: please provide one of the locations for the site number.\n          The current parameter code for this is {usgsParameterCode}. The site\n          does include rails to ensure that the correct code is applied. The two\n          site codes to choose from are: 03179000 and 01646500\n        </p>\n      </div>\n      <form onSubmit={handleSubmit}>\n        <label>Please provide the sample point:</label>\n        <br></br>\n        <input\n          type=\"text\"\n          placeholder=\"Please Enter Code\"\n          onChange={(e) => setTargetPoint(e.target.value)}\n        />\n        <br></br>\n        <button\n          type=\"submit\"\n          // onClick={() => getOutflowData()}\n        >\n          Get Outflow Data\n        </button>\n      </form>\n\n      {/* <button onClick={() => displayOutflowName()}>\n          Get outflow siteName\n        </button>\n        <button onClick={() => getMeasurementValues()}>\n          Get Temperature Data\n        </button>\n        <button onClick={() => displayOutflowData()}>2. Grab all Data</button>\n        <br></br>\n        <button onClick={() => consoleData()}>Console Graph Data</button> \n         <br></br>\n        <button onClick={() => convertToReactVisData()}>\n          3. Conversion Data\n        </button>\n        <br></br>\n        <button onClick={() => setmaxValueGraphHeight()}>\n          4. Max graph height:\n        </button>\n        <br></br>\n        <button onClick={() => graphIt()}> 5. GraphIT!</button>\n        <br></br>\n        <button onClick={() => xAxisLabels()}> Date Check!</button>\n        <br></br> */}\n      <div className=\"chartWrapper\">\n        {graphBoolean ? (\n          <div className=\"chart\" style={{}}>\n            <h5 className=\"chartTitle\">\n              {outflowData.value.timeSeries[0].sourceInfo.siteName}\n            </h5>\n            <FlexibleXYPlot\n              fill=\"red\"\n              opacity=\"1\"\n              dontCheckIfEmpty={true}\n              yDomain={[20, maxGraphHeight]}\n            >\n              <VerticalGridLines />\n              <HorizontalGridLines />\n              <LineMarkSeries data={dataPayload} size=\"1\" />\n              <XAxis title=\"X Axis\" tickTotal={8} />\n              <YAxis title=\"Outflow ft^3/s\" tickTotal={10} />\n            </FlexibleXYPlot>\n          </div>\n        ) : (\n          <h3>No data selected</h3>\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, {Component} from \"react\"\nimport \"../../node_modules/react-vis/dist/style.css\"\nimport { XYPlot, LineSeries, HorizontalGridLines, XAxis, YAxis, VerticalGridLines } from \"react-vis\";\n// import verticalGridLines from \"react-vis/dist/plot/vertical-grid-lines\";\n// import yAxis from \"react-vis/dist/plot/axis/y-axis\";\n\nexport default class Chart extends Component {\n  render() {\n    const data = [\n      { x: 0, y: 8 },\n      { x: 1, y: 5 },\n      { x: 2, y: 4 },\n      { x: 3, y: 9 },\n      { x: 4, y: 1 },\n      { x: 5, y: 7 },\n      { x: 6, y: 6 },\n      { x: 7, y: 3 },\n      { x: 8, y: 2 },\n      { x: 9, y: 0 },\n    ];\n    return (\n      <div className=\"Chart\">\n        <XYPlot height={300} width={300}>\n                <VerticalGridLines/>\n                <HorizontalGridLines />\n                <XAxis />\n                <YAxis/>\n                <LineSeries data={data} />\n          \n        </XYPlot>\n      </div>\n    );\n  }\n}\n","// import logo from './logo.svg';\nimport './App.css';\n// import Input from \"./components/Input\"\nimport FetchData from './components/FetchData';\nimport Chart from \"./components/Chart\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <FetchData targetPoint={\"03179000\"} />\n          {/* <Chart></Chart> */}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}